[{"/Users/hq/SoftwareDev/logger-demo/src/App.js":"1","/Users/hq/SoftwareDev/logger-demo/src/reportWebVitals.js":"2","/Users/hq/SoftwareDev/logger-demo/src/index.js":"3","/Users/hq/SoftwareDev/logger-demo/src/data/data.js":"4","/Users/hq/SoftwareDev/logger-demo/src/Logger/loggerToolbar.js":"5","/Users/hq/SoftwareDev/logger-demo/src/Logger/loggerRow.js":"6","/Users/hq/SoftwareDev/logger-demo/src/Logger/logger.js":"7"},{"size":2897,"mtime":1607454930564,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1607437293988,"results":"10","hashOfConfig":"9"},{"size":500,"mtime":1607437293987,"results":"11","hashOfConfig":"9"},{"size":1905,"mtime":1607447044758,"results":"12","hashOfConfig":"9"},{"size":4117,"mtime":1607447453800,"results":"13","hashOfConfig":"9"},{"size":3031,"mtime":1607447453799,"results":"14","hashOfConfig":"9"},{"size":6374,"mtime":1607454222240,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"73kh4b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/hq/SoftwareDev/logger-demo/src/App.js",[],"/Users/hq/SoftwareDev/logger-demo/src/reportWebVitals.js",[],"/Users/hq/SoftwareDev/logger-demo/src/index.js",[],"/Users/hq/SoftwareDev/logger-demo/src/data/data.js",[],"/Users/hq/SoftwareDev/logger-demo/src/Logger/loggerToolbar.js",[],"/Users/hq/SoftwareDev/logger-demo/src/Logger/loggerRow.js",["32"],"import React, { useState, useEffect, memo } from 'react';\nimport { LOGGER_LINE_NUMBER_INDEX_DELTA } from './utils/constants';\nimport classNames from 'classnames';\nimport './styles/loggerRow.styles.scss';\nimport PropTypes from 'prop-types';\n\nconst LoggerRow = memo(({ index, style, data }) => {\n    const { parsedData, rowInFocus, highlightedRowIndexes, setHighlightedRowIndexes } = data;\n    const [ clickCounter, setClickCounter ] = useState(0);\n    const [ isHiglighted, setIsHiglighted ] = useState(false);\n    const [ rowSeen, setRowSeen ] = useState(false);\n\n    useEffect(() => {\n        let currentHighlightedIndexes = [];\n        let temp = 0;\n        currentHighlightedIndexes = highlightedRowIndexes;\n\n        console.log('This is my higlightedIndexes: ', highlightedRowIndexes); //eslint-disable-line\n        console.log('This is my currentHiglightedIndexes: ', currentHighlightedIndexes); //eslint-disable-line\n\n        if (isHiglighted && clickCounter > 0) {\n            currentHighlightedIndexes.push(index);\n            setHighlightedRowIndexes(currentHighlightedIndexes);\n        }\n        else if (!isHiglighted && clickCounter > 0) {\n            temp = currentHighlightedIndexes.indexOf(index);\n            currentHighlightedIndexes.splice(temp, 1);\n            setHighlightedRowIndexes(currentHighlightedIndexes);\n        }\n    }, [ isHiglighted ]);\n\n    // const lookForItemRow = (searchedInput) => {\n    //     const searchedIndex = parseInt(searchedInput);\n    //     loggerRef.current.scrollToItem(searchedIndex);\n    // };\n\n    const getData = (index) => {\n        return parsedData[ index ]; // Can use this function to later add wrapping for syntax highlighting (basic)\n    };\n\n    const getRowIndex = (index) => {\n        return (index + LOGGER_LINE_NUMBER_INDEX_DELTA);\n    };\n\n    const handleHighlightRow = () => {\n        const counter = clickCounter + 1;\n        setClickCounter(counter);\n        setIsHiglighted(!isHiglighted);\n    };\n\n    const handleMouseFocusEnter = () => {\n        if (rowInFocus !== index && rowSeen) {\n            return null;\n        }\n\n        setRowSeen(true);\n    };\n\n    const rowClassname = classNames('ins-logger-row cell__data-column',\n        {\n            'cell--highlighted': isHiglighted\n        },\n        {\n            'cell--inFocus': index === rowInFocus\n        }\n    );\n\n    return (\n        <div style={ style }\n            className='ins-logger-row'\n            onClick={ () => handleHighlightRow(index) }\n            onMouseEnter={ () => handleMouseFocusEnter() }\n        >\n            <span className='ins-logger-row cell__index-column'>\n                { getRowIndex(index) }\n            </span>\n            <span\n                className={ rowClassname }\n                onClick={ () => handleHighlightRow(index) }\n            >\n                { getData(index) }\n            </span>\n        </div>\n    );\n});\n\nLoggerRow.propTypes = {\n    index: PropTypes.number,\n    style: PropTypes.object,\n    data: PropTypes.object\n};\n\nexport default LoggerRow;\n","/Users/hq/SoftwareDev/logger-demo/src/Logger/logger.js",["33"],"import React, { useEffect, useState, memo }  from 'react';\nimport { VariableSizeList as List, areEqual } from 'react-window';\nimport LoggerRow from './loggerRow';\nimport LoggerToolbar from './loggerToolbar';\n// import LoggerFooter from './loggerFooter';\nimport PropTypes from 'prop-types';\nimport memoize from 'memoize-one';\nimport { LOGGER_ROW_HEIGHT, LOGGER_HEIGHT, LOGGER_WIDTH } from './utils/constants';\nimport YAML from 'yaml';\nimport './styles/base.scss';\nimport './styles/logger.styles.scss';\nimport './styles/styles.css';\n\nconst cleanUpStringArray = (data) => { // Needs refactoring and refinement *later*\n    const cleanArray = [];\n    let s = '';\n    console.log('This is our split: ', data); //eslint-disable-line\n\n    for (s of data) {\n        if (s !== '\\r' && s !== '\\\\r' && s !== '\"') {\n            // spaceCounter++;\n            cleanArray.push(s);\n        }\n    }\n\n    return cleanArray;\n\n};\n\nconst parseConsoleOutput = (data) => {\n    const stringToSplitWith = '\\n';\n    const stringifiedData = YAML.stringify(data);\n    const cleanString = stringifiedData.split(stringToSplitWith);\n\n    return cleanUpStringArray(cleanString);\n};\n\n// Wrapping multiple variables around memoization to rerender loggerRow only when these change, and to send both through a single obj.\nconst createLoggerDataItem = memoize((\n    parsedData,\n    searchedInput,\n    loggerRef,\n    rowInFocus,\n    setRowInFocus,\n    highlightedRowIndexes,\n    setHighlightedRowIndexes,\n    searchedWordIndexes\n) => ({\n    parsedData,\n    searchedInput,\n    loggerRef,\n    rowInFocus,\n    setRowInFocus,\n    highlightedRowIndexes,\n    setHighlightedRowIndexes,\n    searchedWordIndexes\n}));\n\nconst Logger = memo(({ hasSearchbar, data, isParentDataString }) => {\n    const [ parsedData, setParsedData ] = useState([]);\n    const [ searchedInput, setSearchedInput ] = useState('');\n    const [ searchedWordIndexes, setSearchedWordIndexes ] = useState([]);\n    const [ highlightedRowIndexes, setHighlightedRowIndexes ] = useState([]);\n    const [ rowInFocus, setRowInFocus ] = useState();\n    const loggerRef = React.useRef();\n    Logger.displayName = 'Logger';\n    const dataToRender = createLoggerDataItem(\n        parsedData,\n        searchedInput,\n        loggerRef,\n        rowInFocus,\n        setRowInFocus,\n        highlightedRowIndexes,\n        setHighlightedRowIndexes,\n        searchedWordIndexes\n    );\n\n    const scrollToRow = (searchedRowIndex) => {\n        setRowInFocus(searchedRowIndex);\n        loggerRef.current.scrollToItem(searchedRowIndex, 'center');\n\n        return true;\n    };\n\n    useEffect(() => {\n        isParentDataString\n            ? setParsedData(parseConsoleOutput(data.console))\n            : setParsedData('');\n    }, []);\n\n    useEffect(() => {\n        if (searchedWordIndexes.length !== 0) {\n            scrollToRow(searchedWordIndexes[0]);\n        }\n    }, [ searchedWordIndexes ]);\n\n    const searchForKeyword = () => {\n        let rowIndexCounter = 0;\n        const searchResults = [];\n\n        // Need to verify array v. string, might just be receiving an array depending on where they're running this\n        console.log('This is my searchedInput: ', searchedInput); //eslint-disable-line\n\n        if (searchedInput.match(':')) {\n\n            const splitInput = searchedInput.split(':');\n            scrollToRow(parseInt(splitInput[1])); // Needs input validation/Clean Up for readability later\n            setSearchedInput('');\n            return;\n        }\n\n        for (const row of parsedData) {\n            console.log('Looking for the stuffs inside this: ', parsedData); //eslint-disable-line\n            console.log('This is my searchedInput in the search: ', searchedInput); //eslint-disable-line\n            console.log('This is my row of parsedData: ', row); //eslint-disable-line\n            const lowerCaseRow = row.toLowerCase();\n            const keywordIndexPosition = lowerCaseRow.search(searchedInput);\n\n            console.log('This is my searched index position: ', keywordIndexPosition); //eslint-disable-line\n\n            if (keywordIndexPosition !== -1) {\n                searchResults.push(rowIndexCounter);\n            }\n\n            rowIndexCounter++;\n        }\n\n        setSearchedWordIndexes(searchedWordIndexes => [ ...searchedWordIndexes, ...searchResults ]); // gonna need a way for the user to clear these\n    };\n\n    const calculateItemsPerPage = () => {\n        return Math.round(LOGGER_HEIGHT / LOGGER_ROW_HEIGHT); // This will have to change with collapsible rows\n    };\n\n    const setRowHeight = (index) => {\n        return index % 2 === 0\n            ? LOGGER_ROW_HEIGHT\n            : LOGGER_ROW_HEIGHT;\n    };\n\n    return (\n      <>\n        <div className='ins-c-logger' hasGutter>\n            <LoggerToolbar\n                rowInFocus={ rowInFocus }\n                setRowInFocus={ setRowInFocus }\n                scrollToRow={ scrollToRow }\n                loggerRef={ loggerRef }\n                itemCount={ parsedData.length }\n                searchedWordIndexes={ searchedWordIndexes }\n                setSearchedWordIndexes={ setSearchedWordIndexes }\n                itemsPerPage={ calculateItemsPerPage }\n                hasSearchbar={ hasSearchbar }\n                searchedInput={ searchedInput }\n                setSearchedInput={ setSearchedInput }\n                searchForKeyword={ searchForKeyword }\n            />\n            <List\n                className='logger__grid'\n                rowHeight={ index => setRowHeight(index) }\n                height={ LOGGER_HEIGHT }\n                width={ LOGGER_WIDTH }\n                itemSize={ () => 30 }\n                itemCount={ parsedData.length }\n                itemData={ dataToRender }\n                ref={ loggerRef }\n            >\n                { LoggerRow }\n            </List>\n            { /* <LoggerFooter\n                highlightedRowIndexes={ highlightedRowIndexes }\n                scrollToRow={ scrollToRow }\n                setRowInFocus={ setRowInFocus }\n            /> */ }\n        </div>\n      </>\n    );\n}, areEqual);\n\nLogger.defaultProps =  {\n    isParentDataString: true,\n    hasSearchbar: true,\n    includesLoadingStatus: true,\n    searchedKeyword: '',\n    path: '.console'\n};\n\nLogger.propTypes = {\n    hasSearchbar: PropTypes.bool,\n    data: PropTypes.object,\n    isParentDataString: PropTypes.bool\n};\n\nexport default Logger;\n",{"ruleId":"34","severity":1,"message":"35","line":30,"column":8,"nodeType":"36","endLine":30,"endColumn":24,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"38","line":89,"column":8,"nodeType":"36","endLine":89,"endColumn":10,"suggestions":"39"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clickCounter', 'highlightedRowIndexes', 'index', and 'setHighlightedRowIndexes'. Either include them or remove the dependency array.","ArrayExpression",["40"],"React Hook useEffect has missing dependencies: 'data.console' and 'isParentDataString'. Either include them or remove the dependency array. If 'setParsedData' needs the current value of 'data.console', you can also switch to useReducer instead of useState and read 'data.console' in the reducer.",["41"],{"desc":"42","fix":"43"},{"desc":"44","fix":"45"},"Update the dependencies array to be: [clickCounter, highlightedRowIndexes, index, isHiglighted, setHighlightedRowIndexes]",{"range":"46","text":"47"},"Update the dependencies array to be: [data.console, isParentDataString]",{"range":"48","text":"49"},[1350,1366],"[clickCounter, highlightedRowIndexes, index, isHiglighted, setHighlightedRowIndexes]",[2729,2731],"[data.console, isParentDataString]"]